Microsoft (R) Macro Assembler Version 14.31.31105.0	    06/05/22 23:09:21
"Project 6     (Proj6_littleki.asm			     Page 1 - 1


				TITLE Project 6     (Proj6_littleki.asm)

				; Author: Kirby Little
				; Last Modified: 06/02/2022
				; OSU email address: littleki@oregonstate.edu
				; Course number/section: CS271 Section 400
				; Project Number: 6                 Due Date: 06/05/2022
				; Description: Gets 10 user input numbers as strings, converts these to numerical values, stores them
				; in an array, prints this array by converting them back to strings, calculates the sum and average of
				; the array and prints these values.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; These macros should use Irvine’s ReadString to get input from the user, 
				; and WriteString procedures to display output. 


				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays a prompt for user to enter an integer. Then reads the string and stores it
				; in inputStr.
				;
				; Preconditions: None
				;
				; Receives:
				; inPrompt = message for prompting input
				; inputStr = buffer for input string and output
				; bytesLen = counter for number of bytes entered
				; count = max length of string for readstring procedure
				;
				; Returns: 
				; bytesLen = counter for number of bytes entered
				; inputStr = user entered string
				; ---------------------------------------------------------------------------------
				mGetString MACRO	inPrompt, inputStr, bytesLen, count

					push	edx
					push	ecx

				; prompt
					mov		edx, inPrompt
					call	writestring
					call	crlf

					
				; ReadString and store to mGetInput
					mov		edx, inputStr
					mov		ecx, count
					call	readstring
					call	crlf

				; store number of bytes read to mGetBytes
					mov		[bytesLen], eax

					pop		ecx
					pop		edx


				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints the input string, followed by a space.
				;
				; Preconditions: None
				;
				; Receives:
				; inputStr = string to be written
				;
				; returns: None
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO	inputStr

					push	edx
					push	eax

					; print the string, followed by a space
					mov		edx, inputStr
					call	writestring
					mov		al, ' '
					call	writechar

					pop		eax
					pop		edx

				ENDM


 00000000			.data


 00000000 50 6C 65 61 73	inputPrompt		byte		"Please enter an integer.",0								; prompt for mGetString input
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 69 6E 74 65
	   67 65 72 2E 00
 00000019 59 6F 75 72 20	errorInvalid	byte		"Your input is not valid.",0								; error message for invalid input
	   69 6E 70 75 74
	   20 69 73 20 6E
	   6F 74 20 76 61
	   6C 69 64 2E 00
 00000032 53 75 6D 3A 20	sumTitle		byte		"Sum: ",0													; title text for sum of array
	   00
 00000038 41 76 65 72 61	avgTitle		byte		"Average: ",0												; title text for average of array
	   67 65 3A 20 00
 00000042 4E 75 6D 62 65	arrayTitle		byte		"Numbers entered: ",0										; title text for array of numbers entered
	   72 73 20 65 6E
	   74 65 72 65 64
	   3A 20 00

 00000054  0000000C [		mGetInput		byte		12	dup(0)													; input storage for mGetString
	    00
	   ]
 00000060 0000000C		mGetCount		sdword		12															; max input string length for mGetString
 00000064 00000000		mGetBytes		sdword		?															; number of input bytes read by mGetString

 00000068  0000000C [		mDispInput		byte		12	dup(?)													; input storage for mDisplayString
	    00
	   ]

 00000074 00000000		readOut			sdword		?															; output storage for ReadVal
 00000078 00000000		writeIn			sdword		?															; input storage for WriteVal

 0000007C  0000000A [		inputArray		sdword		10	dup(?)													; array for main proc to store mGetString input into
	    00000000
	   ]
 000000A4 00000000		inputSum		sdword		0															; variable for sum of input numbers
 000000A8 00000000		inputAvg		sdword		?															; variable for the average of input numbers
 000000AC 00000000		avgDivRem		sdword		?															; holder for remainder during average calculation


 00000000			.code
				; ---------------------------------------------------------------------------------
				; Name: main
				;
				; Gets 10 valid integers from user input by calling ReadVal. Stores these values in an array.
				; Then displays the integers, their sum, and the truncated average of them with WriteVal.
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives: registers used: ecx, edi, eax, esi, edx, ebx
				; inputArray = array for storing user input integers
				; errorInvalid = error message for invalid entries
				; mGetCount = max input string length for mGetString
				; mGetBytes = counter for number of bytes entered with mGetString macro
				; inputPrompt = prompt message for user input for mGetString macro
				; readOut = output of ReadVal proc
				; mGetInput = input/output for mGetString macro
				; arrayTitle = title for displaying array numbers with WriteVal proc
				; writeIn = input integer for WriteVal conversion to string
				; mDispInput = input string for mDisplayString macro
				; sumTitle = title for displaying sum of values with WriteVal
				; inputSum = input for WriteVal to display sum
				; avgTitle = title for displaying average of inputs with WriteVal
				; inputAvg = input for WriteVal to display average
				;
				; Returns: None
				; ---------------------------------------------------------------------------------
 00000000			main PROC
					; setup for ReadVal to get 10 values from user
 00000000  B9 0000000A			mov		ecx, 10							; loop 10 times for 10 inputs
 00000005  BF 0000007C R		mov		edi, offset inputArray			; set inputArray as destination address

 0000000A			_readLoop:
						; call ReadVal 10 times to store values in the array
 0000000A  68 00000019 R			push	offset errorInvalid
 0000000F  FF 35 00000060 R			push	mGetCount
 00000015  68 00000064 R			push	offset mGetBytes
 0000001A  68 00000000 R			push	offset inputPrompt
 0000001F  68 00000074 R			push	offset readOut
 00000024  68 00000054 R			push	offset mGetInput
 00000029  E8 000000AF				call	ReadVal

						; append readOut val to inputArray
 0000002E  A1 00000074 R			mov		eax, [readOut]
 00000033  89 07				mov		[edi], eax			; move numerical val to inputArray index
 00000035  83 C7 04				add		edi, 4				; increment inputArray index
 00000038  E2 D0			loop	_readLoop

					; Setup to display the integers with WriteVal
 0000003A  BE 0000007C R		mov		esi, offset inputArray			; set inputArray as source address
 0000003F  B9 0000000A			mov		ecx, 10							; set loop counter to 10 to go through all array elements
 00000044  BA 00000042 R		mov		edx, offset arrayTitle
 00000049  E8 00000000 E		call	writestring

 0000004E			_writeLoop:
					; print inputArray one element at a time with WriteVal
						; pass element of inputArray to WriteVal through writeIn variable, converts to string, printed by mDisplayString
 0000004E  8B 06				mov		eax, [esi]
 00000050  A3 00000078 R			mov		writeIn, eax
 00000055  68 00000068 R			push	offset mDispInput
 0000005A  FF 35 00000078 R			push	writeIn
 00000060  E8 00000135				call	WriteVal
 00000065  83 C6 04				add		esi, 4		; increment inputArray indexer
						; pass next element of inputArray to WriteVal
 00000068  E2 E4			loop	_writeLoop

 0000006A  E8 00000000 E		call	crlf

					; show sum setup and title display
 0000006F  BE 0000007C R		mov		esi, offset inputArray
 00000074  B9 0000000A			mov		ecx, 10
 00000079  BA 00000032 R		mov		edx, offset sumTitle
 0000007E  E8 00000000 E		call	writestring

 00000083			_sumLoop:
 00000083  8B 06				mov		eax, [esi]
 00000085  01 05 000000A4 R			add		inputSum, eax		; add inputArray element val to inputSum
 0000008B  83 C6 04				add		esi, 4				; increment inputArray indexer
 0000008E  E2 F3			loop _sumLoop					; add next element val to inputSum

					; call WriteVal on inputSum to convert and print with mDisplayString
 00000090  68 00000068 R		push	offset mDispInput
 00000095  FF 35 000000A4 R		push	inputSum
 0000009B  E8 000000FA			call	WriteVal
 000000A0  E8 00000000 E		call	crlf

					; display average title
 000000A5  BA 00000038 R		mov		edx, offset avgTitle
 000000AA  E8 00000000 E		call	writestring

					; calculate average of the 10 values
 000000AF  A1 000000A4 R		mov		eax, inputSum
 000000B4  BB 0000000A			mov		ebx, 10
 000000B9  99				cdq
 000000BA  F7 FB			idiv	ebx
 000000BC  A3 000000A8 R		mov		inputAvg, eax
					
					; call WriteVal on inputAvg to convert and print with mDisplayString
 000000C1  68 00000068 R		push	offset mDispInput
 000000C6  FF 35 000000A8 R		push	inputAvg
 000000CC  E8 000000C9			call	WriteVal

 000000D1  E8 00000000 E		call	crlf

					Invoke ExitProcess,0	
 000000D6  6A 00	   *	    push   +000000000h
 000000D8  E8 00000000 E   *	    call   ExitProcess
 000000DD			main ENDP


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Takes a string of number/s as input and converts it to an integer value. Gets input with
				; mGetString macro. Validates that the input has no other characters than a leading
				; + or - and that the number does not exceed SDWORD size. Stores converted number in 
				; outputNum for later storing into the array.
				;
				; Preconditions: errorInvalid, mGetBytes, inputPrompt, readOut, and mGetInput
				; must be passed by reference. mGetCount must be passed by value.
				;
				; Postconditions: Local variables numChar and outputHolder are not reset at the end.
				;
				; Receives: registers used(all preserved): ecx, esi, eax, ebx, edi, edx
				; errorInvalid = by reference, error message for invalid input
				; mGetCount = by value, count input for mGetString macro
				; mGetBytes = input/output for byte count of input string for mGetString macro
				; inputPrompt = prompt message for getting input with mGetString
				; readOut = output for integer value once converted from string
				; mGetInput = input/output string for mGetString macro
				;
				; Returns: 
				; mGetInput = input/output string for mGetString macro
				; readOut = value set to integer value of the converted string
				; ---------------------------------------------------------------------------------
 000000DD			ReadVal PROC	inputStr, outputNum, prompt, bytes, count, errorMsg
					local	numChar:dword, outputHolder:sdword, negFlagRead:dword

 000000DD  55		   *	    push   ebp
 000000DE  8B EC	   *	    mov    ebp, esp
 000000E0  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000000E3  60				pushad

 000000E4			_getInput:
					mGetString	prompt, inputStr, bytes, count
 000000E4  52		     1		push	edx
 000000E5  51		     1		push	ecx
 000000E6  8B 55 10	     1		mov		edx, prompt
 000000E9  E8 00000000 E     1		call	writestring
 000000EE  E8 00000000 E     1		call	crlf
 000000F3  8B 55 08	     1		mov		edx, inputStr
 000000F6  8B 4D 18	     1		mov		ecx, count
 000000F9  E8 00000000 E     1		call	readstring
 000000FE  E8 00000000 E     1		call	crlf
 00000103  89 45 14	     1		mov		[bytes], eax
 00000106  59		     1		pop		ecx
 00000107  5A		     1		pop		edx

 00000108  C7 45 F8			mov		[outputHolder], 0		; clear output variable
	   00000000
 0000010F  8B 4D 14			mov		ecx, [bytes]			; use number of bytes input as loop counter
 00000112  FC				cld								; clear direction flag to have pointer increment
 00000113  8B 75 08			mov		esi, inputStr			; move string-to-convert address to esi

 00000116			_readLoop:
 00000116  AC					lodsb						; store character in AL and increment esi
 00000117  3C 30				cmp		al, 48				; check if char < 48
 00000119  72 40				jb		_notNum
 0000011B  3C 39				cmp		al, 57				; check if char > 57
 0000011D  77 3C				ja		_notNum
 0000011F  2C 30				sub		al, 48				; subtract character value to get numeric value
 00000121  0F B6 C0				movzx	eax, al				; store numeric value
 00000124  89 45 FC				mov		numChar, eax
 00000127  8B 45 F8				mov		eax, [outputHolder]	; move output value to eax for mult
 0000012A  BB 0000000A				mov		ebx, 10
 0000012F  F7 EB				imul	ebx
 00000131  70 49				jo		_invalid
 00000133  03 45 FC				add		eax, numChar		; add numerical value
 00000136  70 44				jo		_invalid
 00000138  89 45 F8				mov		outputHolder, eax	; store final numerical value in holder for next processing
 0000013B  8B 7D 0C				mov		edi, outputNum
 0000013E  89 07				mov		[edi], eax			; store final integer in readOut
 00000140  E2 D4			loop _readLoop

 00000142  83 7D F4 00			cmp		negFlagRead, 0
 00000146  74 46			je		_return					; check if negative value, go to return statement if positive

					; multiply by -1 if negative flag was set
 00000148  BB FFFFFFFF			mov		ebx, -1
 0000014D  8B 75 0C			mov		esi, outputNum
 00000150  8B 06			mov		eax, [esi]
 00000152  F7 EB			imul	ebx
 00000154  8B 7D 0C			mov		edi, outputNum
 00000157  89 07			mov		[edi], eax
 00000159  EB 33			jmp		_return

 0000015B			_notNum:
					; if non-number character is first character, check if it is +/- indicator, otherwise it's invalid
 0000015B  3B 4D 14			cmp		ecx, [bytes]
 0000015E  7C 1C			jl		_invalid
 00000160  3C 2D			cmp		al, 45
 00000162  74 04			je		_negative
 00000164  3C 2B			cmp		al, 43
 00000166  74 0A			je		_positive

 00000168			_negative:
					; if negative, set flag and proceed to next character
 00000168  C7 45 F4			mov		negFlagRead, 1
	   00000001
 0000016F  49				dec		ecx
 00000170  EB A4			jmp		_readLoop

 00000172			_positive:
					; if positive, clear flag and proceed to next character
 00000172  C7 45 F4			mov		negFlagRead, 0
	   00000000
 00000179  49				dec		ecx
 0000017A  EB 9A			jmp		_readLoop

 0000017C			_invalid:
					; if invalid, display error message and get input again
 0000017C  8B 55 1C			mov		edx, errorMsg
 0000017F  E8 00000000 E		call	writestring
 00000184  E8 00000000 E		call	crlf
 00000189  E9 FFFFFF56			jmp		_getInput

 0000018E			_return:
 0000018E  C7 45 F4			mov		negFlagRead, 0
	   00000000

 00000195  61				popad

					ret
 00000196  C9		   *	    leave  
 00000197  C2 0018	   *	    ret    00018h


 0000019A			ReadVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Takes a numeric SDWORD value and converts it to a string of character numbers. 
				; Displays the string with mDisplayString macro.
				;
				; Preconditions: mDispInput must be passed by reference. writeIn must be passed
				; by value. 
				; 
				; Postconditions: Local variable asciiVal is not reset at the end.
				;
				; Receives: registers used(all preserved): ebx, edi, eax, esi, edx
				; mDispInput = input/output for mDisplayString
				; writeIn = input numeric value to be converted to ASCII
				;
				; Returns: mDispInput is altered to store the ASCII converted integer for printing.
				; ---------------------------------------------------------------------------------
 0000019A			WriteVal PROC	numIn, strOut
					local	asciiVal:sdword, negFlag:sdword

 0000019A  55		   *	    push   ebp
 0000019B  8B EC	   *	    mov    ebp, esp
 0000019D  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001A0  60				pushad

					; setup for processing, working backwards through string
 000001A1  8B 5D 08			mov		ebx, numIn
 000001A4  89 5D FC			mov		asciiVal, ebx		; asciiVal will hold value of each string character to be written to the string
 000001A7  8B 7D 0C			mov		edi, strOut
 000001AA  83 C7 0B			add		edi, 11
 000001AD  FD				std
 000001AE  B8 00000000			mov		eax, 0
 000001B3  89 07			mov		[edi], eax			; add null terminating 0 to end of string
 000001B5  4F				dec		edi

					; check if input is negative or zero
 000001B6  83 7D FC 00			cmp		asciiVal, 0
 000001BA  7F 19			jg		_posNum				; jump to positive integer handling if positive
 000001BC  0F 84 00000085		je		_zeroVal			; jump to handling for value of zero input if zero

					; since negative, convert to positive and set negFlag, will add negative ASCII sign last
 000001C2  C7 45 F8			mov		negFlag, 1
	   00000001
 000001C9  B8 FFFFFFFF			mov		eax, -1
 000001CE  0F AF 45 FC			imul	eax, asciiVal
 000001D2  89 45 FC			mov		asciiVal, eax

 000001D5			_posNum:
 000001D5  83 7D FC 0A			cmp		asciiVal, 10
 000001D9  7D 10			jge		_bigNum				; jump to large number handling if input is >= 10

					; add input to 48 for ASCII value
 000001DB  8B 45 FC			mov		eax, asciiVal
 000001DE  EB 45			jmp		_finish
 000001E0  83 45 FC 30			add		asciiVal, 48
 000001E4  8D 75 FC			lea		esi, asciiVal
 000001E7  AC				lodsb
 000001E8  AA				stosb

 000001E9  EB 68			jmp		_return				; pass strOut to mDisplayString to print since it is a single digit number

 000001EB			_bigNum:
					; if input is 10 or greater, div input by 10, add remainder to 48 (ASCII 0) for last digit
 000001EB  8B 45 FC			mov		eax, asciiVal
 000001EE  99				cdq
 000001EF  BB 0000000A			mov		ebx, 10
 000001F4  F7 FB			idiv	ebx
 000001F6  89 55 FC			mov		asciiVal, edx		; move remainder to asciiVal
 000001F9  83 45 FC 30			add		asciiVal, 48		; add 48 to remainder for ASCII value

					; append digit to output string
 000001FD  8D 75 FC			lea		esi, asciiVal
 00000200  8B D8			mov		ebx, eax			;store quotient to restore after loading string byte
 00000202  AC				lodsb
 00000203  AA				stosb
 00000204  8B C3			mov		eax, ebx

 00000206			_divLoop:
						; divide quotient by 10 until it is < 10, adding remainders to the string
 00000206  83 F8 0A				cmp		eax, 10			; if quotient of div is >= 10, div by 10 until <10, add remainder to 48 for next digit
 00000209  7C 1A				jl		_finish			; if quotient is less than 10, do finish handling 
 0000020B  99					cdq
 0000020C  BB 0000000A				mov		ebx, 10
 00000211  F7 FB				idiv	ebx
 00000213  89 55 FC				mov		asciiVal, edx
 00000216  83 45 FC 30				add		asciiVal, 48

						; append digit to output string
 0000021A  8D 75 FC				lea		esi, asciiVal
 0000021D  8B D8				mov		ebx, eax
 0000021F  AC					lodsb
 00000220  AA					stosb
 00000221  8B C3				mov		eax, ebx

 00000223  EB E1			jmp		_divLoop			; repeat until quotient is < 10, result is first digit

 00000225			_finish:
					; append quotient as final digit
 00000225  89 45 FC			mov		asciiVal, eax
 00000228  83 45 FC 30			add		asciiVal, 48
 0000022C  8D 75 FC			lea		esi, asciiVal
 0000022F  AC				lodsb
 00000230  AA				stosb
 00000231  83 7D F8 01			cmp		negFlag, 1			; check if negative for negative finishing
 00000235  74 02			je		_finishNeg
 00000237  EB 1A			jmp		_return

 00000239			_finishNeg:
					; append negative sign if negative flag variable is set
 00000239  C7 45 FC			mov		asciiVal, 45
	   0000002D
 00000240  8D 75 FC			lea		esi, asciiVal
 00000243  AC				lodsb
 00000244  AA				stosb
 00000245  EB 0C			jmp		_return

 00000247			_zeroVal:
 00000247  C7 45 FC			mov		asciiVal, 48
	   00000030
 0000024E  8D 75 FC			lea		esi, asciiVal
 00000251  AC				lodsb
 00000252  AA				stosb

 00000253			_return:
 00000253  47				inc		edi					; inc edi to get to beginning of string since stosb dec'd
 00000254  C7 45 F8			mov		negFlag, 0		
	   00000000
 0000025B  89 7D 0C			mov		strOut, edi			; use beginning of string as strOut address to pass to macro
					
					mDisplayString	strOut		; pass ASCII string to mDisplayString to print
 0000025E  52		     1		push	edx
 0000025F  50		     1		push	eax
 00000260  8B 55 0C	     1		mov		edx, strOut
 00000263  E8 00000000 E     1		call	writestring
 00000268  B0 20	     1		mov		al, ' '
 0000026A  E8 00000000 E     1		call	writechar
 0000026F  58		     1		pop		eax
 00000270  5A		     1		pop		edx

 00000271  61				popad

					ret
 00000272  C9		   *	    leave  
 00000273  C2 0008	   *	    ret    00008h


 00000276			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.31.31105.0	    06/05/22 23:09:21
"Project 6     (Proj6_littleki.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000B0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000276 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000DD _TEXT	Length= 000000BD Public STDCALL
  inputStr . . . . . . . . . . .	DWord	 bp + 00000008
  outputNum  . . . . . . . . . .	DWord	 bp + 0000000C
  prompt . . . . . . . . . . . .	DWord	 bp + 00000010
  bytes  . . . . . . . . . . . .	DWord	 bp + 00000014
  count  . . . . . . . . . . . .	DWord	 bp + 00000018
  errorMsg . . . . . . . . . . .	DWord	 bp + 0000001C
  numChar  . . . . . . . . . . .	DWord	 bp - 00000004
  outputHolder . . . . . . . . .	DWord	 bp - 00000008
  negFlagRead  . . . . . . . . .	DWord	 bp - 0000000C
  _getInput  . . . . . . . . . .	L Near	 000000E4 _TEXT	
  _readLoop  . . . . . . . . . .	L Near	 00000116 _TEXT	
  _notNum  . . . . . . . . . . .	L Near	 0000015B _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000168 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000172 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 0000017C _TEXT	
  _return  . . . . . . . . . . .	L Near	 0000018E _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000019A _TEXT	Length= 000000DC Public STDCALL
  numIn  . . . . . . . . . . . .	DWord	 bp + 00000008
  strOut . . . . . . . . . . . .	DWord	 bp + 0000000C
  asciiVal . . . . . . . . . . .	DWord	 bp - 00000004
  negFlag  . . . . . . . . . . .	DWord	 bp - 00000008
  _posNum  . . . . . . . . . . .	L Near	 000001D5 _TEXT	
  _bigNum  . . . . . . . . . . .	L Near	 000001EB _TEXT	
  _divLoop . . . . . . . . . . .	L Near	 00000206 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 00000225 _TEXT	
  _finishNeg . . . . . . . . . .	L Near	 00000239 _TEXT	
  _zeroVal . . . . . . . . . . .	L Near	 00000247 _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000253 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000DD Public STDCALL
  _readLoop  . . . . . . . . . .	L Near	 0000000A _TEXT	
  _writeLoop . . . . . . . . . .	L Near	 0000004E _TEXT	
  _sumLoop . . . . . . . . . . .	L Near	 00000083 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayTitle . . . . . . . . . . .	Byte	 00000042 _DATA	
avgDivRem  . . . . . . . . . . .	DWord	 000000AC _DATA	
avgTitle . . . . . . . . . . . .	Byte	 00000038 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorInvalid . . . . . . . . . .	Byte	 00000019 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 0000007C _DATA	
inputAvg . . . . . . . . . . . .	DWord	 000000A8 _DATA	
inputPrompt  . . . . . . . . . .	Byte	 00000000 _DATA	
inputSum . . . . . . . . . . . .	DWord	 000000A4 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mDispInput . . . . . . . . . . .	Byte	 00000068 _DATA	
mGetBytes  . . . . . . . . . . .	DWord	 00000064 _DATA	
mGetCount  . . . . . . . . . . .	DWord	 00000060 _DATA	
mGetInput  . . . . . . . . . . .	Byte	 00000054 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
readOut  . . . . . . . . . . . .	DWord	 00000074 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumTitle . . . . . . . . . . . .	Byte	 00000032 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
writeIn  . . . . . . . . . . . .	DWord	 00000078 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
