Microsoft (R) Macro Assembler Version 14.31.31105.0	    06/05/22 02:45:41
"Project 6     (Proj6_littleki.asm			     Page 1 - 1


				TITLE Project 6     (Proj6_littleki.asm)

				; Author: Kirby Little
				; Last Modified: 06/02/2022
				; OSU email address: littleki@oregonstate.edu
				; Course number/section: CS271 Section 400
				; Project Number: 6                 Due Date: 06/05/2022
				; Description: Gets 10 user input numbers as strings, converts these to numerical values, stores them
				; in an array, prints this array by converting them back to strings, calculates the sum and average of
				; the array and prints these values.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; These macros should use Irvine’s ReadString to get input from the user, 
				; and WriteString procedures to display output. 


				; ---------------------------------------------------------------------------------
				; Name: mGetString
				; 
				; mGetString:  Display a prompt (input parameter, by reference), then get the user’s keyboard input 
				; into a memory location (output parameter, by reference). You may also need to provide a count 
				; (input parameter, by value) for the length of input string you can accommodate and a provide a 
				; number of bytes read (output parameter, by reference) by the macro.
				;
				; Preconditions: do not use eax, ecx, esi as arguments
				;
				; Receives:
				; arrayAddr = array address
				; arrayType = array type
				; arraySize = array length
				;
				; returns: arrayAddr = generated string address
				; ---------------------------------------------------------------------------------
				mGetString MACRO	inPrompt, inputStr, bytesLen, count

				; called to get one integer at a time for the array

				; prompt
					mov		edx, inPrompt
					call	writestring
					call	crlf

					
				; ReadString and store to mGetInput
					mov		edx, inputStr
					mov		ecx, count
					call	readstring
					call	crlf

				; store number of bytes read to mGetBytes
					mov		[bytesLen], eax


				ENDM


				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; mDisplayString:  Print the string which is stored in a specified memory location 
				; (input parameter, by reference).
				;
				; Preconditions: do not use eax, ecx, esi as arguments
				;
				; Receives:
				; arrayAddr = array address
				; arrayType = array type
				; arraySize = array length
				;
				; returns: arrayAddr = generated string address
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO	inputStr

					mov		edx, inputStr
					call	writestring
					mov		al, ' '
					call	writechar

				ENDM

				; constants
 =-80000000			LO_LIMIT	=	-2147483648
 = 7FFFFFFF			HI_LIMIT	=	+2147483647


 00000000			.data


 00000000 50 6C 65 61 73	inputPrompt		byte		"Please enter an integer.",0								; prompt for mGetString input
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 69 6E 74 65
	   67 65 72 2E 00
 00000019 59 6F 75 72 20	errorInvalid	byte		"Your input is not valid.",0								; error message for invalid input
	   69 6E 70 75 74
	   20 69 73 20 6E
	   6F 74 20 76 61
	   6C 69 64 2E 00

 00000032  0000000B [		mGetInput		byte		11	dup(0)													; input storage for mGetString
	    00
	   ]
 0000003D 0000000C		mGetCount		sdword		12															; max input string length for mGetString
 00000041 00000000		mGetBytes		sdword		?															; number of input bytes read by mGetString

 00000045  0000000B [		mDispInput		byte		11	dup(0)													; input storage for mDisplayString
	    00
	   ]
 00000050  0000000B [		mDispInputRev	byte		11	dup(0)													; input storage for mDisplayString
	    00
	   ]


 0000005B 00000000		readOut			sdword		?															; output storage for ReadVal
 0000005F 00000000		writeIn			sdword		?															; input storage for WriteVal

 00000063  0000000A [		inputArray		sdword		10	dup(?)													; array for main proc to store mGetString input into
	    00000000
	   ]
 0000008B 00000000		inputSum		sdword		0															; variable for sum of input numbers
 0000008F 00000000		inputAvg		sdword		?															; variable for the average of input numbers


 00000000			.code
				; ---------------------------------------------------------------------------------
				; Name: main
				;
				; Write a test program (in main) which uses the ReadVal and WriteVal procedures above to:
				;
				;    1) Get 10 valid integers from the user. Your ReadVal will be called within the loop in main. Do not put your counted loop within ReadVal.
				;    2) Stores these numeric values in an array.
				;    3) Display the integers, their sum, and their truncated average.
				;
				; Your ReadVal will be called within the loop in main. Do not put your counted loop within ReadVal.
				;
				; Preconditions: Preconditions are conditions that need to be true for the
				; procedure to work, like the type of the input provided or the state a
				; certain register need to be in.
				;
				; Postconditions: Postconditions are any changes the procedure makes that are not
				; part of the returns. If any registers are changed and not restored, they
				; should be described here.
				;
				; Receives: Receives is like the input of a procedure; it describes everything
				; the procedure is given to work. Parameters, registers, and global variables
				; the procedure takes as inputs should be described here.
				;
				; Returns: Returns is the output of the procedure. Because assembly procedures don’t
				; return data like high-level languages, returns should describe all the data
				; the procedure intended to change. Parameters and global variables that the
				; procedure altered should be described here. Registers should only be mentioned
				; if you are trying to pass data back in them.
				; ---------------------------------------------------------------------------------
 00000000			main PROC


				; TESTING------------------------------------


				;	call	ReadVal		offset mGetInput, offset readOut, offset inputPrompt, offset mGetBytes, mGetCount


				;	call	WriteVal	writeIn, offset mDispInput

				;	mov		eax, mGetBytes
				;	call	writedec

				;	mov		edx, offset mGetInput
				;	call	writestring

				; ENDT---------------------------------------


					; loop ReadVal to get 10 user inputs
 00000000  B9 0000000A			mov		ecx, 10					; loop 10 times for 10 inputs
 00000005  BF 00000063 R		mov		edi, offset inputArray			; set inputArray as destination address

 0000000A			_readLoop:
						; ReadVal gets one integer at a time w/ mGetString, converts, stores to readOut
 0000000A  68 00000019 R			push	offset errorInvalid
 0000000F  FF 35 0000003D R			push	mGetCount
 00000015  68 00000041 R			push	offset mGetBytes
 0000001A  68 00000000 R			push	offset inputPrompt
 0000001F  68 0000005B R			push	offset readOut
 00000024  68 00000032 R			push	offset mGetInput
						; return value stored in eax
 00000029  E8 0000003E				call	ReadVal	;	offset mGetInput, offset readOut, offset inputPrompt, offset mGetBytes, mGetCount

						; append readOut val to inputArray
 0000002E  A1 0000005B R			mov		eax, [readOut]
 00000033  89 07				mov		[edi], eax			; move numerical val to inputArray index
 00000035  83 C7 04				add		edi, 4				; increment inputArray index
 00000038  E2 D0			loop	_readLoop



					; Setup to display the integers, their sum, and truncated average with WriteVal
 0000003A  BE 00000063 R		mov		esi, offset inputArray			; set inputArray as source address
 0000003F  B9 0000000A			mov		ecx, 10					; set loop counter to 10 to go through all array elements

 00000044			_writeLoop:
					; print inputArray one element at a time with WriteVal
						; pass element of inputArray to WriteVal through writeIn variable, converts to string, printed by mDisplayString
 00000044  8B 06				mov		eax, [esi]
 00000046  A3 0000005F R			mov		writeIn, eax
 0000004B  68 00000050 R			push	offset mDispInputRev
 00000050  68 00000045 R			push	offset mDispInput
 00000055  FF 35 0000005F R			push	writeIn
 0000005B  E8 000000B8				call	WriteVal;	writeIn, offset mDispInput
						; increment inputArray indexer
 00000060  83 C6 04				add		esi, 4
						; pass next element of inputArray to WriteVal
 00000063  E2 DF			loop	_writeLoop


					; show sum
						; add inputArray element val to inputSum
						; increment inputArray indexer
						; add next element val to inputSum
						; call WriteVal on inputSum to convert and print with mDisplayString


					; show average
						; div inputSum by 10
						; figure out rounding
						; store rounded average to inputAvg
						; call WriteVal on inputAvg to convert and print with mDisplayString


					Invoke ExitProcess,0	; exit to operating system
 00000065  6A 00	   *	    push   +000000000h
 00000067  E8 00000000 E   *	    call   ExitProcess
 0000006C			main ENDP


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				;	takes string, outputs integer
				;
				;    1) Invoke the mGetString macro (see parameter requirements above) to get user input in the form of a string of digits.
				;    2) Convert (using string primitives) the string of ascii digits to its numeric value representation (SDWORD), validating
				;    the user’s input is a valid number (no letters, symbols, etc).
				;    3) Store this one value in a memory variable (output parameter, by reference). 
				;
				; Preconditions: Preconditions are conditions that need to be true for the
				; procedure to work, like the type of the input provided or the state a
				; certain register need to be in.
				;
				; Postconditions: Postconditions are any changes the procedure makes that are not
				; part of the returns. If any registers are changed and not restored, they
				; should be described here.
				;
				; Receives: Receives is like the input of a procedure; it describes everything
				; the procedure is given to work. Parameters, registers, and global variables
				; the procedure takes as inputs should be described here.
				;
				; Returns: Returns is the output of the procedure. Because assembly procedures don’t
				; return data like high-level languages, returns should describe all the data
				; the procedure intended to change. Parameters and global variables that the
				; procedure altered should be described here. Registers should only be mentioned
				; if you are trying to pass data back in them.
				; ---------------------------------------------------------------------------------
 0000006C			ReadVal PROC	inputStr, outputNum, prompt, bytes, count, errorMsg
					local	numChar:dword, outputHolder:dword, negFlag:dword

 0000006C  55		   *	    push   ebp
 0000006D  8B EC	   *	    mov    ebp, esp
 0000006F  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000072  60				pushad


					; get user input from mGetString
 00000073			_getInput:
					mGetString	prompt, inputStr, bytes, count
 00000073  8B 55 10	     1		mov		edx, prompt
 00000076  E8 00000000 E     1		call	writestring
 0000007B  E8 00000000 E     1		call	crlf
 00000080  8B 55 08	     1		mov		edx, inputStr
 00000083  8B 4D 18	     1		mov		ecx, count
 00000086  E8 00000000 E     1		call	readstring
 0000008B  E8 00000000 E     1		call	crlf
 00000090  89 45 14	     1		mov		[bytes], eax


					; convert string to numbers
 00000093  C7 45 F8			mov		[outputHolder], 0		; clear output variable
	   00000000
 0000009A  8B 4D 14			mov		ecx, [bytes]		; use number of bytes input as loop counter
 0000009D  FC				cld							; clear direction flag to have pointer increment
 0000009E  8B 75 08			mov		esi, inputStr		; move string to convert to esi

 000000A1			_readLoop:
 000000A1  AC					lodsb						; store character in AL and increment esi
 000000A2  3C 30				cmp		al, 48				; check if char < 48
 000000A4  72 3A				jb		_notNum
 000000A6  3C 39				cmp		al, 57				; check if char > 57
 000000A8  77 36				ja		_notNum
 000000AA  2C 30				sub		al, 48				; subtract character value to get numerical value
 000000AC  0F B6 C0				movzx	eax, al				; store numeric value
 000000AF  89 45 FC				mov		numChar, eax
 000000B2  8B 45 F8				mov		eax, [outputHolder]	; move output value to eax for mult
 000000B5  BB 0000000A				mov		ebx, 10
 000000BA  F7 EB				imul	ebx
 000000BC  03 45 FC				add		eax, numChar		; add numerical value
 000000BF  89 45 F8				mov		outputHolder, eax	; store final numerical value in holder for next processing
 000000C2  8B 7D 0C				mov		edi, outputNum
 000000C5  89 07				mov		[edi], eax			; store final integer in readOut
 000000C7  E2 D8			loop _readLoop

 000000C9  83 7D F4 00			cmp		negFlag, 0
 000000CD  74 44			je		_return
					; multiply by -1 if negative flag was set
 000000CF  BB FFFFFFFF			mov		ebx, -1
 000000D4  8B 45 0C			mov		eax, outputNum
 000000D7  F7 EB			imul	ebx
 000000D9  8B 7D 0C			mov		edi, outputNum
 000000DC  89 07			mov		[edi], eax
 000000DE  EB 33			jmp		_return

					; handle cases of + or - leading characters
					; validate no non-digits or +/- lead and not too large for 32-bit register
						; print error message if not valid
							; get new input
						; print error message if no input
							; get new input
 000000E0			_notNum:
 000000E0  3B 4D 14			cmp		ecx, [bytes]
 000000E3  7C 1C			jl		_invalid
 000000E5  3C 2D			cmp		al, 45
 000000E7  74 04			je		_negative
 000000E9  3C 2B			cmp		al, 43
 000000EB  74 0A			je		_positive

 000000ED			_negative:
 000000ED  C7 45 F4			mov		negFlag, 1
	   00000001
 000000F4  49				dec		ecx
 000000F5  EB AA			jmp		_readLoop

 000000F7			_positive:
 000000F7  C7 45 F4			mov		negFlag, 0
	   00000000
 000000FE  49				dec		ecx
 000000FF  EB A0			jmp		_readLoop

 00000101			_invalid:
 00000101  8B 55 1C			mov		edx, errorMsg
 00000104  E8 00000000 E		call	writestring
 00000109  E8 00000000 E		call	crlf
 0000010E  E9 FFFFFF60			jmp		_getInput

 00000113			_return:
 00000113  61				popad


					ret
 00000114  C9		   *	    leave  
 00000115  C2 0018	   *	    ret    00018h


 00000118			ReadVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				;	takes integer, outputs string
				;
				;    1) Convert a numeric SDWORD value (input parameter, by value) to a string of ASCII digits.
				;    2) Invoke the mDisplayString macro to print the ASCII representation of the SDWORD value to the output.
				;
				;
				; Preconditions: Preconditions are conditions that need to be true for the
				; procedure to work, like the type of the input provided or the state a
				; certain register need to be in.
				;
				; Postconditions: Postconditions are any changes the procedure makes that are not
				; part of the returns. If any registers are changed and not restored, they
				; should be described here.
				;
				; Receives: Receives is like the input of a procedure; it describes everything
				; the procedure is given to work. Parameters, registers, and global variables
				; the procedure takes as inputs should be described here.
				;
				; Returns: Returns is the output of the procedure. Because assembly procedures don’t
				; return data like high-level languages, returns should describe all the data
				; the procedure intended to change. Parameters and global variables that the
				; procedure altered should be described here. Registers should only be mentioned
				; if you are trying to pass data back in them.
				; ---------------------------------------------------------------------------------
 00000118			WriteVal PROC	numIn, strOut, strOutRev
					local	asciiVal:sdword, negFlag:sdword

 00000118  55		   *	    push   ebp
 00000119  8B EC	   *	    mov    ebp, esp
 0000011B  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000011E  60				pushad


					; convert SDWORD digits to ASCII
					; CHANGE THIS TO SET NUMNEG FLAG TO 1 OR 0 AND JUST USE ALL SAME CODE BLOCKS UNTIL END, CHECK FLAG AND DO NEG HANDLING IF 1

					; setup for processing, working backwards through string
 0000011F  8B 5D 08			mov		ebx, numIn
 00000122  89 5D FC			mov		asciiVal, ebx
 00000125  8B 7D 0C			mov		edi, strOut
					; add		edi, 11
					; std
 00000128  FC				cld

					; check if SDWORD is negative or zero
 00000129  83 7D FC 00			cmp		asciiVal, 0
 0000012D  7F 15			jg		_posNum		; jump to positive integer handling
 0000012F  74 77			je		_zeroVal	; handling for value of zero input

					; since negative, convert to positive and set negFlag, will add negative ASCII sign last
 00000131  C7 45 F8			mov		negFlag, 1
	   00000001
 00000138  B8 FFFFFFFF			mov		eax, -1
 0000013D  0F AF 45 FC			imul	eax, asciiVal
 00000141  89 45 FC			mov		asciiVal, eax



 00000144			_posNum:
					; if SDWORD is positive
					; if SDWORD is less than 10
 00000144  83 7D FC 0A			cmp		asciiVal, 10
 00000148  7F 0A			jg		_bigNum		; jump to large number handling

					; add SDWORD to 48 for ASCII value
 0000014A  83 45 FC 30			add		asciiVal, 48
 0000014E  8D 75 FC			lea		esi, asciiVal
					; std
					; lodsb
 00000151  AA				stosb

					; pass strOut to mDisplayString to print
 00000152  EB 60			jmp		_return

 00000154			_bigNum:
					; if SDWORD is 10 or greater
					; div SDWORD by 10, add remainder to 48 (ASCII 0) for last digit
 00000154  8B 45 FC			mov		eax, asciiVal
 00000157  99				cdq
 00000158  BB 0000000A			mov		ebx, 10
 0000015D  F7 FB			idiv	ebx
 0000015F  89 55 FC			mov		asciiVal, edx		; move remainder to asciiVal
 00000162  83 45 FC 30			add		asciiVal, 48		; add 48 to remainder for ASCII

					; append digit to output string
					; std								; clear flag to work backwards from end of strOut
					; mov		edi, strOut+11			; set destination as end of strOut
 00000166  8B 75 FC			mov		esi, asciiVal
 00000169  AC				lodsb
 0000016A  AA				stosb

 0000016B			_divLoop:
						; if quotient of div is >= 10, div by 10 again, add remainder to 48 for next digit
 0000016B  83 F8 0A				cmp		eax, 10
 0000016E  7C 16				jl		_finish		; if quotient is less than 10, do finish handling 
 00000170  99					cdq
 00000171  BB 0000000A				mov		ebx, 10
 00000176  F7 FB				idiv	ebx
 00000178  89 55 FC				mov		asciiVal, edx
 0000017B  83 45 FC 30				add		asciiVal, 48

						; append digit to output string
 0000017F  8B 75 FC				mov		esi, asciiVal
						; std
 00000182  AC					lodsb
 00000183  AA					stosb
						; repeat until quotient is < 10, result is first digit
 00000184  EB E5			jmp		_divLoop
									; append digit to output string
							; output string is in reverse order, so it must be reversed
 00000186			_finish:
					; append quotient as final digit
 00000186  89 45 FC			mov		asciiVal, eax
 00000189  83 45 FC 30			add		asciiVal, 48
 0000018D  8B 75 FC			mov		esi, asciiVal
					; std
 00000190  AC				lodsb
 00000191  AA				stosb
 00000192  83 7D F8 01			cmp		negFlag, 1
 00000196  74 02			je		_finishNeg
 00000198  EB 1A			jmp		_return

 0000019A			_finishNeg:
					; append negative sign if negative flag variable is set
 0000019A  C7 45 FC			mov		asciiVal, 45
	   0000002D
 000001A1  8B 75 FC			mov		esi, asciiVal
					; std
 000001A4  AC				lodsb
 000001A5  AA				stosb
 000001A6  EB 0C			jmp		_return

 000001A8			_zeroVal:
 000001A8  C7 45 FC			mov		asciiVal, 48
	   00000030
 000001AF  8B 75 FC			mov		esi, asciiVal
					; mov		edi, strOut
					; std
 000001B2  AC				lodsb
 000001B3  AA				stosb

 000001B4			_return:

					; pass ASCII string to mDisplayString to print
					; mDisplayString	strOut

					 ; Reverse the string
 000001B4  B9 0000000B		  mov    ecx, 11
 000001B9  8D 75 0C		  lea    esi, strOut
 000001BC  03 F1		  add    esi, ecx
 000001BE  4E			  dec    esi
 000001BF  8B 7D 10		  mov    edi, strOutRev
				  
				  ;   Reverse string
 000001C2			_revLoop:
 000001C2  FD			    std
 000001C3  AC			    lodsb
 000001C4  FC			    cld
 000001C5  AA			    stosb
 000001C6  E2 FA		  LOOP   _revLoop

					
 000001C8  8B 55 0C			mov		edx, strOut
 000001CB  E8 00000000 E		call	writestring
 000001D0  B0 20			mov		al, ' '
 000001D2  E8 00000000 E		call	writechar

 000001D7  61				popad

					ret
 000001D8  C9		   *	    leave  
 000001D9  C2 000C	   *	    ret    0000Ch


 000001DC			WriteVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.31.31105.0	    06/05/22 02:45:41
"Project 6     (Proj6_littleki.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000093 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001DC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000006C _TEXT	Length= 000000AC Public STDCALL
  inputStr . . . . . . . . . . .	DWord	 bp + 00000008
  outputNum  . . . . . . . . . .	DWord	 bp + 0000000C
  prompt . . . . . . . . . . . .	DWord	 bp + 00000010
  bytes  . . . . . . . . . . . .	DWord	 bp + 00000014
  count  . . . . . . . . . . . .	DWord	 bp + 00000018
  errorMsg . . . . . . . . . . .	DWord	 bp + 0000001C
  numChar  . . . . . . . . . . .	DWord	 bp - 00000004
  outputHolder . . . . . . . . .	DWord	 bp - 00000008
  negFlag  . . . . . . . . . . .	DWord	 bp - 0000000C
  _getInput  . . . . . . . . . .	L Near	 00000073 _TEXT	
  _readLoop  . . . . . . . . . .	L Near	 000000A1 _TEXT	
  _notNum  . . . . . . . . . . .	L Near	 000000E0 _TEXT	
  _negative  . . . . . . . . . .	L Near	 000000ED _TEXT	
  _positive  . . . . . . . . . .	L Near	 000000F7 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 00000101 _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000113 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000118 _TEXT	Length= 000000C4 Public STDCALL
  numIn  . . . . . . . . . . . .	DWord	 bp + 00000008
  strOut . . . . . . . . . . . .	DWord	 bp + 0000000C
  strOutRev  . . . . . . . . . .	DWord	 bp + 00000010
  asciiVal . . . . . . . . . . .	DWord	 bp - 00000004
  negFlag  . . . . . . . . . . .	DWord	 bp - 00000008
  _posNum  . . . . . . . . . . .	L Near	 00000144 _TEXT	
  _bigNum  . . . . . . . . . . .	L Near	 00000154 _TEXT	
  _divLoop . . . . . . . . . . .	L Near	 0000016B _TEXT	
  _finish  . . . . . . . . . . .	L Near	 00000186 _TEXT	
  _finishNeg . . . . . . . . . .	L Near	 0000019A _TEXT	
  _zeroVal . . . . . . . . . . .	L Near	 000001A8 _TEXT	
  _return  . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 000001C2 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006C Public STDCALL
  _readLoop  . . . . . . . . . .	L Near	 0000000A _TEXT	
  _writeLoop . . . . . . . . . .	L Near	 00000044 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI_LIMIT . . . . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_LIMIT . . . . . . . . . . . .	Number	 -80000000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorInvalid . . . . . . . . . .	Byte	 00000019 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 00000063 _DATA	
inputAvg . . . . . . . . . . . .	DWord	 0000008F _DATA	
inputPrompt  . . . . . . . . . .	Byte	 00000000 _DATA	
inputSum . . . . . . . . . . . .	DWord	 0000008B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mDispInputRev  . . . . . . . . .	Byte	 00000050 _DATA	
mDispInput . . . . . . . . . . .	Byte	 00000045 _DATA	
mGetBytes  . . . . . . . . . . .	DWord	 00000041 _DATA	
mGetCount  . . . . . . . . . . .	DWord	 0000003D _DATA	
mGetInput  . . . . . . . . . . .	Byte	 00000032 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
readOut  . . . . . . . . . . . .	DWord	 0000005B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
writeIn  . . . . . . . . . . . .	DWord	 0000005F _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
